!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/aman/Documents/tcp-ip-study/8.bsdsockets/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	//
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
ARP_CACHE_LEN	include/arp/arp.h	/^#define ARP_CACHE_LEN /;"	d
ARP_DATA_LEN	include/arp/arp.h	/^#define ARP_DATA_LEN /;"	d
ARP_ETHERNET	include/arp/arp.h	/^#define ARP_ETHERNET /;"	d
ARP_FREE	include/arp/arp.h	/^#define ARP_FREE /;"	d
ARP_H	include/arp/arp.h	/^#define ARP_H$/;"	d
ARP_HDR_LEN	include/arp/arp.h	/^#define ARP_HDR_LEN /;"	d
ARP_IPV4	include/arp/arp.h	/^#define ARP_IPV4 /;"	d
ARP_REPLY	include/arp/arp.h	/^#define ARP_REPLY /;"	d
ARP_REQUEST	include/arp/arp.h	/^#define ARP_REQUEST /;"	d
ARP_RESOLVED	include/arp/arp.h	/^#define ARP_RESOLVED /;"	d
ARP_WAITING	include/arp/arp.h	/^#define ARP_WAITING /;"	d
BASIC_H	include/lib/basic.h	/^#define BASIC_H$/;"	d
BUFLEN	include/dev/netdev.h	/^#define BUFLEN /;"	d
CLEAR	include/lib/basic.h	/^#define CLEAR(/;"	d
CLI_H_	include/apps/cli.h	/^#define CLI_H_$/;"	d
CLOSED	include/tcp/tcp.h	/^    CLOSED,$/;"	e	enum:tcp_states
CLOSE_WAIT	include/tcp/tcp.h	/^    CLOSE_WAIT,$/;"	e	enum:tcp_states
CLOSING	include/tcp/tcp.h	/^    CLOSING,$/;"	e	enum:tcp_states
CMDBUFLEN	include/lib/utils.h	/^#define CMDBUFLEN /;"	d
CPPFLAGS	Makefile	/^CPPFLAGS = -I include -Wall -pthread$/;"	m
CURL_H_	include/apps/curl.h	/^#define CURL_H_$/;"	d
DEF_H_	include/arp/dst.h	/^#define DEF_H_$/;"	d
DNS_H	include/dns/dns.h	/^#define DNS_H$/;"	d
ESTABLISHED	include/tcp/tcp.h	/^    ESTABLISHED,$/;"	e	enum:tcp_states
ETHERNET_H_	include/eth/eth.h	/^#define ETHERNET_H_$/;"	d
ETH_HDR_LEN	include/eth/eth.h	/^#define ETH_HDR_LEN /;"	d
FIN_WAIT_1	include/tcp/tcp.h	/^    FIN_WAIT_1,$/;"	e	enum:tcp_states
FIN_WAIT_2	include/tcp/tcp.h	/^    FIN_WAIT_2,$/;"	e	enum:tcp_states
FIRST_FD	src/tcp/tcp.c	/^#define  FIRST_FD /;"	d	file:
ICMPV4	include/ip/ip.h	/^#define ICMPV4 /;"	d
ICMPV4_H	include/ip/icmpv4.h	/^#define ICMPV4_H$/;"	d
ICMP_V4_DST_UNREACHABLE	include/ip/icmpv4.h	/^#define ICMP_V4_DST_UNREACHABLE /;"	d
ICMP_V4_ECHO	include/ip/icmpv4.h	/^#define ICMP_V4_ECHO /;"	d
ICMP_V4_MALFORMED	include/ip/icmpv4.h	/^#define ICMP_V4_MALFORMED /;"	d
ICMP_V4_REDIRECT	include/ip/icmpv4.h	/^#define ICMP_V4_REDIRECT /;"	d
ICMP_V4_REPLY	include/ip/icmpv4.h	/^#define ICMP_V4_REPLY /;"	d
ICMP_V4_ROUTER_ADV	include/ip/icmpv4.h	/^#define ICMP_V4_ROUTER_ADV /;"	d
ICMP_V4_ROUTER_SOL	include/ip/icmpv4.h	/^#define ICMP_V4_ROUTER_SOL /;"	d
ICMP_V4_SRC_QUENCH	include/ip/icmpv4.h	/^#define ICMP_V4_SRC_QUENCH /;"	d
ICMP_V4_TIMEOUT	include/ip/icmpv4.h	/^#define ICMP_V4_TIMEOUT /;"	d
INET_H_	include/socket/inet.h	/^#define INET_H_$/;"	d
INET_OPS	src/socket/inet.c	/^static int INET_OPS = 1;$/;"	v	typeref:typename:int	file:
IPV4	include/ip/ip.h	/^#define IPV4 /;"	d
IPV4_H	include/ip/ip.h	/^#define IPV4_H$/;"	d
IP_HDR_LEN	include/ip/ip.h	/^#define IP_HDR_LEN /;"	d
IP_TCP	include/ip/ip.h	/^#define IP_TCP /;"	d
LAST_ACK	include/tcp/tcp.h	/^    LAST_ACK$/;"	e	enum:tcp_states
LISTEN	include/tcp/tcp.h	/^    LISTEN,$/;"	e	enum:tcp_states
MAX_CMD_LENGTH	include/apps/cli.h	/^#define MAX_CMD_LENGTH /;"	d
MAX_HOSTNAME	src/apps/curl.c	/^#define MAX_HOSTNAME /;"	d	file:
MAX_tcp_sockS	src/tcp/tcp.c	/^#define MAX_tcp_sockS /;"	d	file:
NETDEV_H	include/dev/netdev.h	/^#define NETDEV_H$/;"	d
NUM_THREADS	src/main.c	/^#define NUM_THREADS /;"	d	file:
ROUTE_H_	include/arp/route.h	/^#define ROUTE_H_$/;"	d
SIGNAL_H_	include/lib/signal_handlers.h	/^#define SIGNAL_H_$/;"	d
SKBUFF_H_	include/socket/skbuff.h	/^#define SKBUFF_H_$/;"	d
SOCKET_H_	include/socket/socket.h	/^#define  SOCKET_H_$/;"	d
SOCK_H_	include/socket/sock.h	/^#define SOCK_H_$/;"	d
SS_CONNECTED	include/socket/socket.h	/^    SS_CONNECTED,                   \/* connected to socket          *\/$/;"	e	enum:socket_state
SS_CONNECTING	include/socket/socket.h	/^    SS_CONNECTING,                  \/* in process of connecting     *\/$/;"	e	enum:socket_state
SS_DISCONNECTING	include/socket/socket.h	/^    SS_DISCONNECTING                \/* in process of disconnecting  *\/$/;"	e	enum:socket_state
SS_FREE	include/socket/socket.h	/^    SS_FREE = 0,                    \/* not allocated                *\/$/;"	e	enum:socket_state
SS_UNCONNECTED	include/socket/socket.h	/^    SS_UNCONNECTED,                 \/* unconnected to any socket    *\/$/;"	e	enum:socket_state
SYN_RECEIVED	include/tcp/tcp.h	/^    SYN_RECEIVED,$/;"	e	enum:tcp_states
SYN_SENT	include/tcp/tcp.h	/^    SYN_SENT,$/;"	e	enum:tcp_states
SYSHEAD_H	include/lib/syshead.h	/^#define SYSHEAD_H$/;"	d
TCP_ACK	include/tcp/tcp.h	/^#define TCP_ACK /;"	d
TCP_ECN	include/tcp/tcp.h	/^#define TCP_ECN /;"	d
TCP_FIN	include/tcp/tcp.h	/^#define TCP_FIN /;"	d
TCP_HDR_LEN	include/tcp/tcp.h	/^#define TCP_HDR_LEN /;"	d
TCP_H_	include/tcp/tcp.h	/^#define TCP_H_$/;"	d
TCP_PSH	include/tcp/tcp.h	/^#define TCP_PSH /;"	d
TCP_RST	include/tcp/tcp.h	/^#define TCP_RST /;"	d
TCP_SYN	include/tcp/tcp.h	/^#define TCP_SYN /;"	d
TCP_URG	include/tcp/tcp.h	/^#define TCP_URG /;"	d
TCP_WIN	include/tcp/tcp.h	/^#define TCP_WIN /;"	d
TUNTAP_IF_H	include/dev/tuntap_if.h	/^#define TUNTAP_IF_H$/;"	d
UTILS_H	include/lib/utils.h	/^#define UTILS_H$/;"	d
WAIT_H_	include/socket/wait.h	/^#define WAIT_H_$/;"	d
_connect	src/socket/socket.c	/^int _connect(int socketfd, const struct sockaddr *addr, socklen_t addrlen) {$/;"	f	typeref:typename:int
_signal	src/lib/signal_handlers.c	/^void* _signal(int signo, sighandler_t handler) {$/;"	f	typeref:typename:void *
_socket	src/socket/socket.c	/^int _socket(int domain, int type, int protocol) {$/;"	f	typeref:typename:int
ack	include/tcp/tcp.h	/^    uint32_t ack;$/;"	m	struct:tcphdr	typeref:typename:uint32_t
addr	include/dev/netdev.h	/^    uint32_t addr;$/;"	m	struct:netdev	typeref:typename:uint32_t
addr_len	include/dev/netdev.h	/^    uint8_t addr_len;$/;"	m	struct:netdev	typeref:typename:uint8_t
alloc_skb	src/socket/skbuff.c	/^struct sock_buff *alloc_skb(uint32_t size) {$/;"	f	typeref:struct:sock_buff *
alloc_socket	src/socket/socket.c	/^static struct socket *alloc_socket() {$/;"	f	typeref:struct:socket *	file:
alloc_tcp_sock	src/tcp/tcp.c	/^struct sock* alloc_tcp_sock() {$/;"	f	typeref:struct:sock *
argc	include/apps/cli.h	/^    int argc;$/;"	m	struct:command	typeref:typename:int
args	include/apps/cli.h	/^    int args;$/;"	m	struct:command	typeref:typename:int
argv	include/apps/cli.h	/^    char** argv;$/;"	m	struct:command	typeref:typename:char **
arp_alloc_skb	src/arp/arp_input.c	/^static struct sock_buff *arp_alloc_skb() {$/;"	f	typeref:struct:sock_buff *	file:
arp_cache	src/arp/arp.c	/^static struct arp_cache_entry arp_cache[ARP_CACHE_LEN];$/;"	v	typeref:struct:arp_cache_entry[]	file:
arp_cache_entry	include/arp/arp.h	/^struct arp_cache_entry {$/;"	s
arp_get_hwaddr	src/arp/arp.c	/^uint8_t* arp_get_hwaddr(uint32_t *sip) {$/;"	f	typeref:typename:uint8_t *
arp_hdr	include/arp/arp.h	/^struct arp_hdr {$/;"	s
arp_hdr	src/arp/arp_input.c	/^static inline struct arp_hdr *arp_hdr(struct sock_buff *skb) {$/;"	f	typeref:struct:arp_hdr *	file:
arp_hdr	src/arp/arp_output.c	/^static inline struct arp_hdr *arp_hdr(struct sock_buff *skb) {$/;"	f	typeref:struct:arp_hdr *	file:
arp_hdr_len	src/arp/arp.c	/^int arp_hdr_len(struct netdev *dev) {$/;"	f	typeref:typename:int
arp_init	src/arp/arp.c	/^void arp_init() {$/;"	f	typeref:typename:void
arp_ipv4	include/arp/arp.h	/^struct arp_ipv4 {$/;"	s
arp_rcv	src/arp/arp_input.c	/^void arp_rcv(struct sock_buff *skb) {$/;"	f	typeref:typename:void
arp_reply	src/arp/arp_output.c	/^void arp_reply(struct sock_buff *skb, struct netdev *netdev) {$/;"	f	typeref:typename:void
arp_request	src/arp/arp_input.c	/^int arp_request(uint32_t sip, uint32_t dip, struct netdev *dev) {$/;"	f	typeref:typename:int
broadcast_hw	src/arp/arp_input.c	/^static uint8_t broadcast_hw[] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};$/;"	v	typeref:typename:uint8_t[]	file:
build/%.o	Makefile	/^build\/%.o: src\/%.c $(headers)$/;"	t
checksum	src/lib/utils.c	/^uint16_t checksum(void *addr, int count, int start_sum) {$/;"	f	typeref:typename:uint16_t
clean	Makefile	/^clean:$/;"	t
cmd_func	include/apps/cli.h	/^    void* (* cmd_func) (void* arg);$/;"	m	struct:command	typeref:typename:void * (*)(void * arg)
cmd_str	include/apps/cli.h	/^    char* cmd_str;$/;"	m	struct:command	typeref:typename:char *
cmd_to_run	src/main.c	/^static struct command *cmd_to_run;$/;"	v	typeref:struct:command *	file:
cmds	src/apps/cli.c	/^static struct command cmds[] = {$/;"	v	typeref:struct:command[]	file:
code	include/ip/icmpv4.h	/^    uint8_t code;$/;"	m	struct:icmp_v4	typeref:typename:uint8_t
command	include/apps/cli.h	/^struct command {$/;"	s
connect	include/socket/sock.h	/^    int (*connect) (struct sock *sk, struct sockaddr addr, int len);$/;"	m	struct:net_ops	typeref:typename:int (*)(struct sock * sk,struct sockaddr addr,int len)
connect	include/socket/socket.h	/^    int (*connect) (struct socket *sk, struct socketaddr *vaddr, int len, int flags);$/;"	m	struct:socket_ops	typeref:typename:int (*)(struct socket * sk,struct socketaddr * vaddr,int len,int flags)
create	include/socket/socket.h	/^    int (*create) (struct socket *sock, int protocol);$/;"	m	struct:net_family	typeref:typename:int (*)(struct socket * sock,int protocol)
csum	include/ip/icmpv4.h	/^    uint16_t csum;$/;"	m	struct:icmp_v4	typeref:typename:uint16_t
csum	include/ip/ip.h	/^    uint16_t csum;$/;"	m	struct:iphdr	typeref:typename:uint16_t
csum	include/tcp/tcp.h	/^    uint16_t csum;$/;"	m	struct:tcphdr	typeref:typename:uint16_t
curl	src/apps/curl.c	/^void* curl(void* arg) {$/;"	f	typeref:typename:void *
daddr	include/ip/ip.h	/^    uint32_t daddr;$/;"	m	struct:iphdr	typeref:typename:uint32_t
daddr	include/socket/sock.h	/^    uint32_t daddr;$/;"	m	struct:sock	typeref:typename:uint32_t
daddr	include/tcp/tcp.h	/^    uint32_t daddr;$/;"	m	struct:tcpiphdr	typeref:typename:uint32_t
data	include/arp/arp.h	/^    unsigned char data[];$/;"	m	struct:arp_hdr	typeref:typename:unsigned char[]
data	include/ip/icmpv4.h	/^    uint8_t data[];$/;"	m	struct:icmp_v4	typeref:typename:uint8_t[]
data	include/ip/icmpv4.h	/^    uint8_t data[];$/;"	m	struct:icmp_v4_dst_unreachable	typeref:typename:uint8_t[]
data	include/ip/icmpv4.h	/^    uint8_t data[];$/;"	m	struct:icmp_v4_echo	typeref:typename:uint8_t[]
data	include/ip/ip.h	/^    uint8_t data[];$/;"	m	struct:iphdr	typeref:typename:uint8_t[]
data	include/socket/skbuff.h	/^    uint8_t *data;$/;"	m	struct:sock_buff	typeref:typename:uint8_t *
data	include/tcp/tcp.h	/^    uint8_t data[];$/;"	m	struct:tcphdr	typeref:typename:uint8_t[]
debug	Makefile	/^debug: CFLAGS+= -g$/;"	t
debug	Makefile	/^debug: lvl-ip$/;"	t
dev	include/arp/dst.h	/^    struct netdev *dev;$/;"	m	struct:dst_entry_t	typeref:struct:netdev *
dev	src/dev/tuntap_if.c	/^static char* dev;$/;"	v	typeref:typename:char *	file:
dip	include/arp/arp.h	/^    uint32_t dip;$/;"	m	struct:arp_ipv4	typeref:typename:uint32_t
dmac	include/arp/arp.h	/^    unsigned char dmac[6];$/;"	m	struct:arp_ipv4	typeref:typename:unsigned char[6]
dmac	include/eth/eth.h	/^    uint8_t  dmac[6];$/;"	m	struct:eth_hdr	typeref:typename:uint8_t[6]
dport	include/socket/sock.h	/^    uint16_t dport;$/;"	m	struct:sock	typeref:typename:uint16_t
dport	include/tcp/tcp.h	/^    uint16_t dport;$/;"	m	struct:tcphdr	typeref:typename:uint16_t
dst	include/arp/route.h	/^    struct dst_entry_t dst;$/;"	m	struct:route_table_t	typeref:struct:dst_entry_t
dst	include/socket/skbuff.h	/^    struct dst_entry_t *dst;$/;"	m	struct:sock_buff	typeref:struct:dst_entry_t *
dst_entry_t	include/arp/dst.h	/^struct dst_entry_t {$/;"	s
dst_nei_output	src/arp/dst.c	/^int dst_nei_output(struct sock_buff *skb) {$/;"	f	typeref:typename:int
end	include/socket/skbuff.h	/^    uint8_t *end;$/;"	m	struct:sock_buff	typeref:typename:uint8_t *
eth_hdr	include/eth/eth.h	/^struct eth_hdr $/;"	s
eth_hdr	src/eth/eth.c	/^struct eth_hdr* eth_hdr(struct sock_buff *skb) {$/;"	f	typeref:struct:eth_hdr *
ethertype	include/eth/eth.h	/^    uint16_t ethertype;$/;"	m	struct:eth_hdr	typeref:typename:uint16_t
families	src/socket/socket.c	/^static struct net_family *families[128] = {$/;"	v	typeref:struct:net_family * [128]	file:
fd	include/socket/socket.h	/^    uint32_t fd;$/;"	m	struct:socket	typeref:typename:uint32_t
fd	include/tcp/tcp.h	/^    int fd;$/;"	m	struct:tcp_sock	typeref:typename:int
flag_offset	include/ip/ip.h	/^    uint16_t flag_offset : 13;$/;"	m	struct:iphdr	typeref:typename:uint16_t:13
flags	include/ip/ip.h	/^    uint16_t flags : 3;$/;"	m	struct:iphdr	typeref:typename:uint16_t:3
flags	include/tcp/tcp.h	/^    uint8_t flags;$/;"	m	struct:tcphdr	typeref:typename:uint8_t
free_skb	src/socket/skbuff.c	/^void free_skb(struct sock_buff *skb) {$/;"	f	typeref:typename:void
free_tcp_sock	src/tcp/tcp.c	/^void free_tcp_sock(struct tcp_sock *sock) {$/;"	f	typeref:typename:void
generate_iss	src/tcp/tcp.c	/^uint32_t generate_iss() {return 1525252;}$/;"	f	typeref:typename:uint32_t
generate_port	src/tcp/tcp.c	/^static uint16_t generate_port() {return 12000;}$/;"	f	typeref:typename:uint16_t	file:
get_address	src/dns/dns.c	/^int get_address(char* host, struct sockaddr* addr) {$/;"	f	typeref:typename:int
get_socket	src/socket/socket.c	/^static struct socket* get_socket(int fd) {return &sockets[0];}$/;"	f	typeref:struct:socket *	file:
get_tcp_sock	src/tcp/tcp.c	/^struct tcp_sock* get_tcp_sock(int sockfd) {$/;"	f	typeref:struct:tcp_sock *
head	include/socket/skbuff.h	/^    uint8_t *head;$/;"	m	struct:sock_buff	typeref:typename:uint8_t *
headers	Makefile	/^headers = $(wildcard include\/*.h) $(wildcard include\/**\/*.h)$/;"	m
hl	include/tcp/tcp.h	/^    uint8_t hl : 4;$/;"	m	struct:tcphdr	typeref:typename:uint8_t:4
hln	include/tcp/tcp.h	/^    uint16_t hln;$/;"	m	struct:tcp_sock	typeref:typename:uint16_t
hwaddr	include/dev/netdev.h	/^    uint8_t hwaddr[6];$/;"	m	struct:netdev	typeref:typename:uint8_t[6]
hwsize	include/arp/arp.h	/^    uint8_t hwsize;$/;"	m	struct:arp_hdr	typeref:typename:uint8_t
hwtype	include/arp/arp.h	/^    uint16_t hwtype;$/;"	m	struct:arp_cache_entry	typeref:typename:uint16_t
hwtype	include/arp/arp.h	/^    uint16_t hwtype;$/;"	m	struct:arp_hdr	typeref:typename:uint16_t
icmp_v4	include/ip/icmpv4.h	/^struct icmp_v4 {$/;"	s
icmp_v4_dst_unreachable	include/ip/icmpv4.h	/^struct icmp_v4_dst_unreachable {$/;"	s
icmp_v4_echo	include/ip/icmpv4.h	/^struct icmp_v4_echo {$/;"	s
icmpv4_incoming	src/ip/icmpv4.c	/^void icmpv4_incoming(struct sock_buff *skb) $/;"	f	typeref:typename:void
icmpv4_reply	src/ip/icmpv4.c	/^void icmpv4_reply(struct sock_buff *skb) {$/;"	f	typeref:typename:void
id	include/ip/icmpv4.h	/^    uint16_t id;$/;"	m	struct:icmp_v4_echo	typeref:typename:uint16_t
id	include/ip/ip.h	/^    uint16_t id;$/;"	m	struct:iphdr	typeref:typename:uint16_t
ihl	include/ip/ip.h	/^    uint8_t ihl : 4; \/* TODO: Support Big Endian hosts *\/$/;"	m	struct:iphdr	typeref:typename:uint8_t:4
inet	src/socket/inet.c	/^struct net_family inet = {$/;"	v	typeref:struct:net_family
inet_connect	src/socket/inet.c	/^int inet_connect(struct socket *sock, struct sockaddr *addr, int len, int flags) {$/;"	f	typeref:typename:int
inet_create	src/socket/inet.c	/^int inet_create(struct socket *sock, int protcol) {$/;"	f	typeref:typename:int
inet_ops	src/socket/inet.c	/^static struct sock_type inet_ops[] = {$/;"	v	typeref:struct:sock_type[]	file:
inet_socket	src/socket/inet.c	/^int inet_socket(struct socket *sock, int protocol) {$/;"	f	typeref:typename:int
inet_stream_connect	src/socket/inet.c	/^int inet_stream_connect(struct socket *sock, struct sockaddr *addr, int len, int flags) {$/;"	f	typeref:typename:int
inet_stream_ops	src/socket/inet.c	/^static struct socket_ops inet_stream_ops = {$/;"	v	typeref:struct:socket_ops	file:
init_signals	src/lib/signal_handlers.c	/^\/*inline*\/ void init_signals() {$/;"	f	typeref:typename:void
init_stack	src/main.c	/^static void init_stack() {$/;"	f	typeref:typename:void	file:
init_tcp_socks	src/tcp/tcp.c	/^void init_tcp_socks() {$/;"	f	typeref:typename:void
insert_arp_translation_table	src/arp/arp.c	/^int insert_arp_translation_table(struct arp_hdr *hdr, struct arp_ipv4 *data)$/;"	f	typeref:typename:int
ip_hdr	src/ip/ip.c	/^struct iphdr *ip_hdr (struct sock_buff *skb) {$/;"	f	typeref:struct:iphdr *
ip_output	src/ip/ip_output.c	/^int ip_output(struct sock *sk, struct sock_buff *skb) {$/;"	f	typeref:typename:int
ip_rcv	src/ip/ip_input.c	/^int ip_rcv(struct sock_buff *skb) {$/;"	f	typeref:typename:int
ip_send_check	src/ip/ip_output.c	/^void ip_send_check(struct iphdr *hdr) {$/;"	f	typeref:typename:void
iphdr	include/ip/ip.h	/^struct iphdr {$/;"	s
irs	include/tcp/tcp.h	/^    uint32_t irs;$/;"	m	struct:tcb	typeref:typename:uint32_t
iss	include/tcp/tcp.h	/^    uint32_t iss;$/;"	m	struct:tcb	typeref:typename:uint32_t
len	include/ip/icmpv4.h	/^    uint8_t len;$/;"	m	struct:icmp_v4_dst_unreachable	typeref:typename:uint8_t
len	include/ip/ip.h	/^    uint16_t len;$/;"	m	struct:iphdr	typeref:typename:uint16_t
lock	include/socket/wait.h	/^    pthread_mutex_t lock;$/;"	m	struct:wait_lock	typeref:typename:pthread_mutex_t
lvl-ip	Makefile	/^lvl-ip: $(obj)$/;"	t
main	src/main.c	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main_rt	src/arp/route.c	/^struct route_table_t main_rt;$/;"	v	typeref:struct:route_table_t
net_family	include/socket/socket.h	/^struct net_family {$/;"	s
net_ops	include/socket/sock.h	/^struct net_ops {$/;"	s
net_ops	include/socket/socket.h	/^    struct net_ops *net_ops;$/;"	m	struct:sock_type	typeref:struct:net_ops *
netdev	include/dev/netdev.h	/^struct netdev {$/;"	s
netdev	include/socket/skbuff.h	/^    struct netdev *netdev;$/;"	m	struct:sock_buff	typeref:struct:netdev *
netdev	src/dev/netdev.c	/^struct netdev netdev;$/;"	v	typeref:struct:netdev
netdev_free	src/dev/netdev.c	/^void netdev_free() {$/;"	f	typeref:typename:void
netdev_get	src/dev/netdev.c	/^struct netdev* netdev_get(uint32_t sip) {$/;"	f	typeref:struct:netdev *
netdev_init	src/dev/netdev.c	/^void netdev_init(char *addr, char *hwaddr)$/;"	f	typeref:typename:void
netdev_loop	src/dev/netdev.c	/^void* netdev_loop() {$/;"	f	typeref:typename:void *
netdev_queue_xmit	src/dev/netdev.c	/^int netdev_queue_xmit(struct sock_buff *skb) {$/;"	f	typeref:typename:int
netdev_rx_action	src/dev/netdev.c	/^int netdev_rx_action(struct sock_buff *skb) {$/;"	f	typeref:typename:int
netdev_transmit	src/dev/netdev.c	/^int netdev_transmit(struct sock_buff *skb, uint16_t ethertype, uint8_t *dst_hw) {$/;"	f	typeref:typename:int
noop	src/apps/cli.c	/^void* noop(void* arg) {$/;"	f	typeref:typename:void *
obj	Makefile	/^obj = $(src:src\/%.c=build\/%.o)$/;"	m
opcode	include/arp/arp.h	/^    uint16_t opcode;$/;"	m	struct:arp_hdr	typeref:typename:uint16_t
ops	include/socket/sock.h	/^    struct net_ops *ops;$/;"	m	struct:sock	typeref:struct:net_ops *
ops	include/socket/socket.h	/^    struct socket_ops *ops;$/;"	m	struct:socket	typeref:struct:socket_ops *
parse_args	src/apps/cli.c	/^struct command* parse_args(int argc, char** argv) {$/;"	f	typeref:struct:command *
parse_ipv4_string	src/lib/utils.c	/^uint32_t parse_ipv4_string(char* addr) {$/;"	f	typeref:typename:uint32_t
payload	include/eth/eth.h	/^    uint8_t  payload[];$/;"	m	struct:eth_hdr	typeref:typename:uint8_t[]
print_error	src/lib/utils.c	/^void print_error(char *str, ...) {$/;"	f	typeref:typename:void
print_hexdump	src/lib/utils.c	/^void print_hexdump(char *str, int len) {$/;"	f	typeref:typename:void
print_skb	src/socket/skbuff.c	/^void print_skb(struct sock_buff *skb) {$/;"	f	typeref:typename:void
prosize	include/arp/arp.h	/^    uint8_t prosize;$/;"	m	struct:arp_hdr	typeref:typename:uint8_t
proto	include/ip/ip.h	/^    uint8_t proto;$/;"	m	struct:iphdr	typeref:typename:uint8_t
proto	include/tcp/tcp.h	/^    uint8_t proto;$/;"	m	struct:tcpiphdr	typeref:typename:uint8_t
protocol	include/socket/skbuff.h	/^    uint16_t protocol;$/;"	m	struct:sock_buff	typeref:typename:uint16_t
protocol	include/socket/sock.h	/^    int protocol;$/;"	m	struct:sock	typeref:typename:int
protocol	include/socket/socket.h	/^    int protocol;$/;"	m	struct:sock_type	typeref:typename:int
protype	include/arp/arp.h	/^    uint16_t protype;$/;"	m	struct:arp_hdr	typeref:typename:uint16_t
rcv_buf	include/tcp/tcp.h	/^    uint8_t *rcv_buf;$/;"	m	struct:tcb	typeref:typename:uint8_t *
rcv_nxt	include/tcp/tcp.h	/^    uint32_t rcv_nxt;$/;"	m	struct:tcb	typeref:typename:uint32_t
rcv_up	include/tcp/tcp.h	/^    uint32_t rcv_up;$/;"	m	struct:tcb	typeref:typename:uint32_t
rcv_wnd	include/tcp/tcp.h	/^    uint32_t rcv_wnd;$/;"	m	struct:tcb	typeref:typename:uint32_t
read	include/socket/socket.h	/^    int (*read) (struct socket *sock, int len);$/;"	m	struct:socket_ops	typeref:typename:int (*)(struct socket * sock,int len)
ready	include/socket/wait.h	/^    pthread_cond_t ready;$/;"	m	struct:wait_lock	typeref:typename:pthread_cond_t
route_init	src/arp/route.c	/^void route_init() {$/;"	f	typeref:typename:void
route_lookup	src/arp/route.c	/^struct route_table_t *route_lookup(uint32_t daddr) {$/;"	f	typeref:struct:route_table_t *
route_table_t	include/arp/route.h	/^struct route_table_t {$/;"	s
rsvd	include/tcp/tcp.h	/^    uint8_t rsvd : 4;$/;"	m	struct:tcphdr	typeref:typename:uint8_t:4
run_cmd	src/lib/utils.c	/^int run_cmd(char *cmd, ...) {$/;"	f	typeref:typename:int
run_threads	src/main.c	/^static void run_threads() {$/;"	f	typeref:typename:void	file:
running	src/main.c	/^int running = 1;$/;"	v	typeref:typename:int
saddr	include/ip/ip.h	/^    uint32_t saddr;$/;"	m	struct:iphdr	typeref:typename:uint32_t
saddr	include/socket/sock.h	/^    uint32_t saddr;$/;"	m	struct:sock	typeref:typename:uint32_t
saddr	include/tcp/tcp.h	/^    uint32_t saddr;$/;"	m	struct:tcpiphdr	typeref:typename:uint32_t
seq	include/ip/icmpv4.h	/^    uint16_t seq;$/;"	m	struct:icmp_v4_echo	typeref:typename:uint16_t
seq	include/tcp/tcp.h	/^    uint32_t seq;$/;"	m	struct:tcphdr	typeref:typename:uint32_t
set_if_address	src/dev/tuntap_if.c	/^static int set_if_address(char *dev, const char *cidr)$/;"	f	typeref:typename:int	file:
set_if_route	src/dev/tuntap_if.c	/^static int set_if_route(char *dev, char *cidr)$/;"	f	typeref:typename:int	file:
set_if_up	src/dev/tuntap_if.c	/^static int set_if_up(char *dev)$/;"	f	typeref:typename:int	file:
sighandler_t	include/lib/signal_handlers.h	/^typedef void (*sighandler_t)(int);$/;"	t	typeref:typename:void (*)(int)
sip	include/arp/arp.h	/^    uint32_t sip;$/;"	m	struct:arp_cache_entry	typeref:typename:uint32_t
sip	include/arp/arp.h	/^    uint32_t sip;$/;"	m	struct:arp_ipv4	typeref:typename:uint32_t
size	include/socket/skbuff.h	/^    uint32_t size;$/;"	m	struct:sock_buff	typeref:typename:uint32_t
sk	include/socket/socket.h	/^    struct sock *sk;$/;"	m	struct:socket	typeref:struct:sock *
sk	include/tcp/tcp.h	/^    struct sock sk;$/;"	m	struct:tcp_sock	typeref:struct:sock
sk_alloc	src/socket/sock.c	/^struct sock *sk_alloc(struct net_ops *ops) {$/;"	f	typeref:struct:sock *
skb_push	src/socket/skbuff.c	/^uint8_t* skb_push(struct sock_buff *skb, uint32_t size) {$/;"	f	typeref:typename:uint8_t *
skb_reserve	src/socket/skbuff.c	/^void* skb_reserve(struct sock_buff *skb, unsigned int len) {$/;"	f	typeref:typename:void *
sleep	include/socket/socket.h	/^    struct wait_lock sleep;$/;"	m	struct:socket	typeref:struct:wait_lock
smac	include/arp/arp.h	/^    unsigned char smac[6];$/;"	m	struct:arp_cache_entry	typeref:typename:unsigned char[6]
smac	include/arp/arp.h	/^    unsigned char smac[6];$/;"	m	struct:arp_ipv4	typeref:typename:unsigned char[6]
smac	include/eth/eth.h	/^    uint8_t  smac[6];$/;"	m	struct:eth_hdr	typeref:typename:uint8_t[6]
snd_buf	include/tcp/tcp.h	/^    uint8_t *snd_buf;$/;"	m	struct:tcb	typeref:typename:uint8_t *
snd_nxt	include/tcp/tcp.h	/^    uint32_t snd_nxt;$/;"	m	struct:tcb	typeref:typename:uint32_t
snd_una	include/tcp/tcp.h	/^    uint32_t snd_una;$/;"	m	struct:tcb	typeref:typename:uint32_t
snd_up	include/tcp/tcp.h	/^    uint32_t snd_up;$/;"	m	struct:tcb	typeref:typename:uint32_t
snd_wl1	include/tcp/tcp.h	/^    uint32_t snd_wl1;$/;"	m	struct:tcb	typeref:typename:uint32_t
snd_wl2	include/tcp/tcp.h	/^    uint32_t snd_wl2;$/;"	m	struct:tcb	typeref:typename:uint32_t
snd_wnd	include/tcp/tcp.h	/^    uint32_t snd_wnd;$/;"	m	struct:tcb	typeref:typename:uint32_t
sock	include/socket/sock.h	/^    struct socket *sock;$/;"	m	struct:sock	typeref:struct:socket *
sock	include/socket/sock.h	/^struct sock {$/;"	s
sock_buff	include/socket/skbuff.h	/^struct sock_buff {$/;"	s
sock_init_data	src/socket/sock.c	/^void sock_init_data(struct socket *sock, struct sock *sk) {$/;"	f	typeref:typename:void
sock_type	include/socket/socket.h	/^struct sock_type {$/;"	s
socket	include/socket/socket.h	/^    int (*socket) (struct socket *sock, int protocol);$/;"	m	struct:socket_ops	typeref:typename:int (*)(struct socket * sock,int protocol)
socket	include/socket/socket.h	/^struct socket {$/;"	s
socket_ops	include/socket/socket.h	/^    struct socket_ops *socket_ops;$/;"	m	struct:sock_type	typeref:struct:socket_ops *
socket_ops	include/socket/socket.h	/^struct socket_ops {$/;"	s
socket_state	include/socket/socket.h	/^enum socket_state {$/;"	g
sockets	src/socket/socket.c	/^static struct socket sockets[12];$/;"	v	typeref:struct:socket[12]	file:
sport	include/socket/sock.h	/^    uint16_t sport;$/;"	m	struct:sock	typeref:typename:uint16_t
sport	include/tcp/tcp.h	/^    uint16_t sport;$/;"	m	struct:tcphdr	typeref:typename:uint16_t
src	Makefile	/^src = $(wildcard src\/*.c) $(wildcard src\/**\/*.c)$/;"	m
state	include/arp/arp.h	/^    unsigned int state;$/;"	m	struct:arp_cache_entry	typeref:typename:unsigned int
state	include/socket/sock.h	/^    int state;$/;"	m	struct:sock	typeref:typename:int
state	include/socket/socket.h	/^    enum socket_state state;$/;"	m	struct:socket	typeref:enum:socket_state
state	include/tcp/tcp.h	/^    enum tcp_states state;$/;"	m	struct:tcp_sock	typeref:enum:tcp_states
stop_stack_handler	src/lib/signal_handlers.c	/^void stop_stack_handler(int signo) {$/;"	f	typeref:typename:void
sum_every_16_bits	src/lib/utils.c	/^uint32_t sum_every_16_bits(void* addr, int count) {$/;"	f	typeref:typename:uint32_t
tap_addr	src/dev/tuntap_if.c	/^char *tap_addr = "10.0.0.5\/24";$/;"	v	typeref:typename:char *
tap_route	src/dev/tuntap_if.c	/^char *tap_route = "10.0.0.0\/24";$/;"	v	typeref:typename:char *
tcb	include/tcp/tcp.h	/^    struct tcb tcb;$/;"	m	struct:tcp_sock	typeref:struct:tcb
tcb	include/tcp/tcp.h	/^struct tcb {$/;"	s
tcp_alloc_skb	src/tcp/tcp_output.c	/^static struct sock_buff *tcp_alloc_skb(int size) {$/;"	f	typeref:struct:sock_buff *	file:
tcp_connect	src/tcp/tcp_output.c	/^int tcp_connect(struct tcp_sock *sock) {$/;"	f	typeref:typename:int
tcp_flags	include/tcp/tcp.h	/^    uint8_t tcp_flags;$/;"	m	struct:tcb	typeref:typename:uint8_t
tcp_in	src/tcp/tcp.c	/^void tcp_in(struct sock_buff *skb) {$/;"	f	typeref:typename:void
tcp_init	src/tcp/tcp.c	/^void tcp_init() {$/;"	f	typeref:typename:void
tcp_ops	src/tcp/tcp.c	/^struct net_ops tcp_ops = {$/;"	v	typeref:struct:net_ops
tcp_select_initial_window	src/tcp/tcp_output.c	/^void tcp_select_initial_window(uint32_t *rcv_wnd) {$/;"	f	typeref:typename:void
tcp_send_syn	src/tcp/tcp_output.c	/^static int tcp_send_syn(struct tcp_sock *sock) {$/;"	f	typeref:typename:int	file:
tcp_sock	include/tcp/tcp.h	/^struct tcp_sock {$/;"	s
tcp_socks	src/tcp/tcp.c	/^static struct tcp_sock tcp_socks[MAX_tcp_sockS];$/;"	v	typeref:struct:tcp_sock[]	file:
tcp_states	include/tcp/tcp.h	/^enum tcp_states {$/;"	g
tcp_transmit_sockbuf	src/tcp/tcp_output.c	/^static int tcp_transmit_sockbuf(struct sock *sk, struct sock_buff *skb) {$/;"	f	typeref:typename:int	file:
tcp_udp_checksum	src/lib/utils.c	/^int tcp_udp_checksum(uint32_t saddr, uint32_t daddr, $/;"	f	typeref:typename:int
tcp_v4_checksum	src/lib/utils.c	/^int tcp_v4_checksum(struct sock_buff *skb, uint32_t saddr, uint32_t daddr) {$/;"	f	typeref:typename:int
tcp_v4_init	src/tcp/tcp.c	/^int tcp_v4_init(struct sock *sk, const struct sockaddr *addr, socklen_t addrlen, int flags) {$/;"	f	typeref:typename:int
tcphdr	include/tcp/tcp.h	/^struct tcphdr {$/;"	s
tcpiphdr	include/tcp/tcp.h	/^struct tcpiphdr {$/;"	s
threads	src/main.c	/^static pthread_t threads[NUM_THREADS];$/;"	v	typeref:typename:pthread_t[]	file:
tlen	include/tcp/tcp.h	/^    uint16_t tlen;$/;"	m	struct:tcpiphdr	typeref:typename:uint16_t
tos	include/ip/ip.h	/^    uint8_t tos;$/;"	m	struct:iphdr	typeref:typename:uint8_t
ttl	include/ip/ip.h	/^    uint8_t ttl;$/;"	m	struct:iphdr	typeref:typename:uint8_t
tun_alloc	src/dev/tuntap_if.c	/^static int tun_alloc(char *dev)$/;"	f	typeref:typename:int	file:
tun_fd	src/dev/tuntap_if.c	/^static int tun_fd;$/;"	v	typeref:typename:int	file:
tun_free	src/dev/tuntap_if.c	/^void tun_free() { free(dev); }/;"	f	typeref:typename:void
tun_init	src/dev/tuntap_if.c	/^void tun_init() {$/;"	f	typeref:typename:void
tun_read	src/dev/tuntap_if.c	/^int tun_read(char *buf, int len)$/;"	f	typeref:typename:int
tun_write	src/dev/tuntap_if.c	/^int tun_write(char *buf, int len)$/;"	f	typeref:typename:int
type	include/ip/icmpv4.h	/^    uint8_t type;$/;"	m	struct:icmp_v4	typeref:typename:uint8_t
type	include/socket/socket.h	/^    int type;$/;"	m	struct:sock_type	typeref:typename:int
type	include/socket/socket.h	/^    uint16_t type;$/;"	m	struct:socket	typeref:typename:uint16_t
unused	include/ip/icmpv4.h	/^    uint8_t unused;$/;"	m	struct:icmp_v4_dst_unreachable	typeref:typename:uint8_t
update_arp_translation_table	src/arp/arp.c	/^int update_arp_translation_table(struct arp_hdr *hdr, struct arp_ipv4 *data)$/;"	f	typeref:typename:int
urp	include/tcp/tcp.h	/^    uint16_t urp;$/;"	m	struct:tcphdr	typeref:typename:uint16_t
usage	src/apps/cli.c	/^void* usage(void* arg) {$/;"	f	typeref:typename:void *
var	include/ip/icmpv4.h	/^    uint16_t var;$/;"	m	struct:icmp_v4_dst_unreachable	typeref:typename:uint16_t
version	include/ip/ip.h	/^    uint8_t version : 4;$/;"	m	struct:iphdr	typeref:typename:uint8_t:4
wait_init	include/socket/wait.h	/^static inline int wait_init(struct wait_lock *w) {$/;"	f	typeref:typename:int
wait_lock	include/socket/wait.h	/^struct wait_lock {$/;"	s
wait_sleep	include/socket/wait.h	/^static inline int wait_sleep(struct wait_lock *w) {$/;"	f	typeref:typename:int
wait_threads	src/main.c	/^static void wait_threads() {$/;"	f	typeref:typename:void	file:
wait_wakeup	include/socket/wait.h	/^static inline int wait_wakeup(struct wait_lock *w) {$/;"	f	typeref:typename:int
win	include/tcp/tcp.h	/^    uint16_t win;$/;"	m	struct:tcphdr	typeref:typename:uint16_t
write	include/socket/socket.h	/^    int (*write) (struct socket *sock, const void *buf, int len);$/;"	m	struct:socket_ops	typeref:typename:int (*)(struct socket * sock,const void * buf,int len)
zero	include/tcp/tcp.h	/^    uint8_t zero;$/;"	m	struct:tcpiphdr	typeref:typename:uint8_t
